(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{293:function(_,v,t){"use strict";t.r(v);var a=t(14),r=Object(a.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h2",{attrs:{id:"c-语法基础"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#c-语法基础"}},[_._v("#")]),_._v(" C#语法基础")]),_._v(" "),v("h3",{attrs:{id:"cs文件结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#cs文件结构"}},[_._v("#")]),_._v(" cs文件结构")]),_._v(" "),v("p",[_._v("结构展示")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://gitee.com/babbittry321/blogImages/raw/master/img/clip_image009.jpg",alt:""}})]),_._v(" "),v("ol",[v("li",[v("p",[_._v("程序的第一行"),v("code",[_._v("using System;")]),_._v(" "),v("code",[_._v("using")]),_._v("关键字用于在程序中包含"),v("code",[_._v("System")]),_._v("命名空间。一个程序一般有多个"),v("code",[_._v("using")]),_._v("语句")])]),_._v(" "),v("li",[v("p",[_._v("下一行是"),v("code",[_._v("namespace")]),_._v("声明。一个"),v("code",[_._v("namespace")]),_._v("是一系列的类。 "),v("code",[_._v("WebApplication1")]),_._v(" 命名空间包含了类"),v("code",[_._v("Program")]),_._v("。")])]),_._v(" "),v("li",[v("p",[_._v("下一行是"),v("code",[_._v("class")]),_._v("声明。类"),v("code",[_._v("Program")]),_._v("包含了程序使用的数据和方法声明。类-般包含多个方法。 方法定义了类的行为。在这里，"),v("code",[_._v("Program")]),_._v("类只有一 个"),v("code",[_._v("Main")]),_._v("方法。")])]),_._v(" "),v("li",[v("p",[_._v("下一行定义了"),v("code",[_._v("Main")]),_._v("方法，是所有C#程序的入口点。"),v("code",[_._v("Main")]),_._v("方法说明当执行时类将做什么动作。")])]),_._v(" "),v("li",[v("p",[_._v("Main方法通过方法体中的语句指定它的行为。")])])]),_._v(" "),v("h3",{attrs:{id:"c-基本语法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#c-基本语法"}},[_._v("#")]),_._v(" C#基本语法")]),_._v(" "),v("p",[v("strong",[_._v("注意:")])]),_._v(" "),v("ul",[v("li",[v("p",[_._v("C#大小写敏感的。")])]),_._v(" "),v("li",[v("p",[_._v("所有的语句和表达式必须以分号"),v("code",[_._v(";")]),_._v("结尾。")])]),_._v(" "),v("li",[v("p",[_._v("与Java不同的是，文件名可以不同于类的名称。")])])]),_._v(" "),v("p",[_._v("C#是一种面向对象的编程语言。在面向对象的程序设计方法中，程序由各种对象组成。相同种类的对象通常具有相同的类型。")]),_._v(" "),v("blockquote",[v("p",[_._v("案例:\n以人类为例，从人类中诞生出的具体对象“C罗”和“梅西”，同属人类，故俩人类型相同。")])]),_._v(" "),v("h3",{attrs:{id:"关键字"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#关键字"}},[_._v("#")]),_._v(" 关键字")]),_._v(" "),v("p",[_._v("关键字，是对编译器有"),v("strong",[_._v("特殊意义")]),_._v("的"),v("strong",[_._v("预定义保留标示符")]),_._v("，它们"),v("strong",[_._v("不能")]),_._v("在程序中用作标示符")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("using关键字")]),_._v(" "),v("p",[_._v("在任何C#程序中的第一条语句都是: "),v("code",[_._v("using System;")])]),_._v(" "),v("p",[v("code",[_._v("using")]),_._v("关键字用于在程序中包含命名空间。一个程序可以包含多个"),v("code",[_._v("using")]),_._v("语句。")])]),_._v(" "),v("li",[v("p",[_._v("class关键字")]),_._v(" "),v("p",[_._v("class关键字用于声明一个类。")])]),_._v(" "),v("li",[v("p",[_._v("C#的注释方式")]),_._v(" "),v("ol",[v("li",[_._v("// 单行注释")]),_._v(" "),v("li",[_._v("/**/ 多行注释")]),_._v(" "),v("li",[_._v("// // 文档注释")]),_._v(" "),v("li",[_._v("注释的作用:")])]),_._v(" "),v("ul",[v("li",[v("p",[_._v("解释:说明代码作用")])]),_._v(" "),v("li",[v("p",[_._v("注销:将暂时不需要的代码注销")])])])])]),_._v(" "),v("blockquote",[v("p",[_._v("铭记:")]),_._v(" "),v("ol",[v("li",[_._v("不写注释是流氓")]),_._v(" "),v("li",[_._v("名字瞎起是扯淡")]),_._v(" "),v("li",[_._v("相比注销，注释意义更大")]),_._v(" "),v("li",[_._v("要做到别人一看就能看懂")])])]),_._v(" "),v("h4",{attrs:{id:"变量"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[_._v("#")]),_._v(" 变量")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("变量是一个供程序存储数据盒子。在C#中，每个变量都有一个特定的类型，不同类型的变量其内存大 小也不尽相同。")])]),_._v(" "),v("li",[v("p",[_._v("C# 中提供的基本类型大致分为以下几类：")]),_._v(" "),v("table",[v("thead",[v("tr",[v("th",[_._v("类型")]),_._v(" "),v("th",[_._v("举例")]),_._v(" "),v("th")])]),_._v(" "),v("tbody",[v("tr",[v("td",[_._v("整数类型")]),_._v(" "),v("td",[_._v("byte、short、int、long")]),_._v(" "),v("td")]),_._v(" "),v("tr",[v("td",[_._v("浮点型")]),_._v(" "),v("td",[_._v("float、double")]),_._v(" "),v("td")]),_._v(" "),v("tr",[v("td",[_._v("十进制类型")]),_._v(" "),v("td",[_._v("decimal")]),_._v(" "),v("td")]),_._v(" "),v("tr",[v("td",[_._v("布尔类型")]),_._v(" "),v("td",[_._v("bool")]),_._v(" "),v("td")]),_._v(" "),v("tr",[v("td",[_._v("字符类型")]),_._v(" "),v("td",[_._v("string、char")]),_._v(" "),v("td")]),_._v(" "),v("tr",[v("td",[_._v("空类型")]),_._v(" "),v("td",[_._v("null")]),_._v(" "),v("td")]),_._v(" "),v("tr",[v("td",[_._v("推断类型")]),_._v(" "),v("td",[_._v("var")]),_._v(" "),v("td",[_._v('必须先明确地"指定你的变量是什么数据类型,才能给它赋值.')])])])])])]),_._v(" "),v("h2",{attrs:{id:"c-语法进阶"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#c-语法进阶"}},[_._v("#")]),_._v(" C#语法进阶")]),_._v(" "),v("h3",{attrs:{id:"表达式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#表达式"}},[_._v("#")]),_._v(" 表达式")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("表达式由**操作数(operand)"),v("strong",[_._v("和")]),_._v("运算符(operator)**构成。运算符的示例包括"),v("code",[_._v("+")]),_._v("、"),v("code",[_._v("-")]),_._v("、"),v("code",[_._v("\\*")]),_._v("、"),v("code",[_._v("/")]),_._v("和"),v("code",[_._v("new")]),_._v("。操作数的示例包括文本、字段、局部变量和表达式。")])]),_._v(" "),v("li",[v("p",[_._v("当表达式包含多个运算符时，运算符的优先级(precedence)控制各运算符的计算顺序。例如，表达式"),v("code",[_._v("x + y * z")]),_._v("按"),v("code",[_._v("x + (y * z)")]),_._v("计算，因为"),v("code",[_._v("*")]),_._v("运算符的优先级高于"),v("code",[_._v("+")]),_._v("运算符。")])]),_._v(" "),v("li",[v("p",[_._v("(了解)大多数运算符都可以"),v("strong",[_._v("重载(overload)")]),_._v("。运算符重载允许指定用户定义的运算符实现来执行运算，这 些运算的操作数中至少有一个，甚至所有操作数都属于用户定义的类类型或结构类型。")])]),_._v(" "),v("li",[v("p",[_._v("下表总结了C#简单常用的运算符，并按优先级从高到低的顺序列出各运算符类别。同类别中的运算符 优先级相同。")])])]),_._v(" "),v("table",[v("thead",[v("tr",[v("th",[v("strong",[_._v("类别")])]),_._v(" "),v("th",[v("strong",[_._v("表达式")])]),_._v(" "),v("th",[v("strong",[_._v("说明")])])])]),_._v(" "),v("tbody",[v("tr",[v("td",[_._v("基本")]),_._v(" "),v("td",[v("code",[_._v("x.m")])]),_._v(" "),v("td",[_._v("成员访问")])]),_._v(" "),v("tr",[v("td"),_._v(" "),v("td",[v("code",[_._v("x(...)")])]),_._v(" "),v("td",[_._v("方法和委托调用")])]),_._v(" "),v("tr",[v("td"),_._v(" "),v("td",[v("code",[_._v("x[...]")])]),_._v(" "),v("td",[_._v("数组和索引器访问")])]),_._v(" "),v("tr",[v("td"),_._v(" "),v("td",[v("code",[_._v("newT(...)")])]),_._v(" "),v("td",[_._v("对象和委托创建")])]),_._v(" "),v("tr",[v("td"),_._v(" "),v("td",[v("code",[_._v("newT(...){...}")])]),_._v(" "),v("td",[_._v("使用初始值设定项创建对象")])]),_._v(" "),v("tr",[v("td"),_._v(" "),v("td",[v("code",[_._v("new{...}")])]),_._v(" "),v("td",[_._v("匿名对象初始值设定项")])]),_._v(" "),v("tr",[v("td"),_._v(" "),v("td",[v("code",[_._v("newT[...]")])]),_._v(" "),v("td",[_._v("数组创建")])]),_._v(" "),v("tr",[v("td",[_._v("一元")]),_._v(" "),v("td",[v("code",[_._v("+x")])]),_._v(" "),v("td",[_._v("恒等")])]),_._v(" "),v("tr",[v("td"),_._v(" "),v("td",[v("code",[_._v("-x")])]),_._v(" "),v("td",[_._v("求相反数")])]),_._v(" "),v("tr",[v("td"),_._v(" "),v("td",[v("code",[_._v("!x")])]),_._v(" "),v("td",[_._v("逻辑求反")])]),_._v(" "),v("tr",[v("td"),_._v(" "),v("td",[v("code",[_._v("~x")])]),_._v(" "),v("td",[_._v("按位求反")])]),_._v(" "),v("tr",[v("td"),_._v(" "),v("td",[v("code",[_._v("++x")])]),_._v(" "),v("td",[_._v("前增量(先"),v("strong",[_._v("运算")]),_._v("后"),v("strong",[_._v("取值")]),_._v(",先运算再"),v("strong",[_._v("执行当前语句")]),_._v(")")])]),_._v(" "),v("tr",[v("td"),_._v(" "),v("td",[v("code",[_._v("--x")])]),_._v(" "),v("td",[_._v("前减量(先运算后取值,先运算再执行当前语句)")])]),_._v(" "),v("tr",[v("td"),_._v(" "),v("td",[v("code",[_._v("x++")])]),_._v(" "),v("td",[_._v("后增量(先"),v("strong",[_._v("取值")]),_._v("后"),v("strong",[_._v("运算")]),_._v(",先"),v("strong",[_._v("执行当前语句")]),_._v("再运算)")])]),_._v(" "),v("tr",[v("td"),_._v(" "),v("td",[v("code",[_._v("x--")])]),_._v(" "),v("td",[_._v("后减量(先取值后运算,先执行当前语句再运算)")])]),_._v(" "),v("tr",[v("td"),_._v(" "),v("td",[v("code",[_._v("(T)x")])]),_._v(" "),v("td",[_._v("将x显示转换为类型T")])]),_._v(" "),v("tr",[v("td",[_._v("二元")]),_._v(" "),v("td",[v("code",[_._v("x * y")])]),_._v(" "),v("td",[_._v("乘法")])]),_._v(" "),v("tr",[v("td"),_._v(" "),v("td",[v("code",[_._v("x / y")])]),_._v(" "),v("td",[_._v("除法")])]),_._v(" "),v("tr",[v("td"),_._v(" "),v("td",[v("code",[_._v("x % y")])]),_._v(" "),v("td",[_._v("取余")])]),_._v(" "),v("tr",[v("td"),_._v(" "),v("td",[v("code",[_._v("x + y")])]),_._v(" "),v("td",[_._v("加法，字符串串联")])]),_._v(" "),v("tr",[v("td"),_._v(" "),v("td",[v("code",[_._v("x - y")])]),_._v(" "),v("td",[_._v("减法")])]),_._v(" "),v("tr",[v("td"),_._v(" "),v("td",[v("code",[_._v("x << y")])]),_._v(" "),v("td",[_._v("位左移")])]),_._v(" "),v("tr",[v("td"),_._v(" "),v("td",[v("code",[_._v("x >> y")])]),_._v(" "),v("td",[_._v("位右移")])]),_._v(" "),v("tr",[v("td"),_._v(" "),v("td",[v("code",[_._v("x < y")])]),_._v(" "),v("td",[_._v("小于")])]),_._v(" "),v("tr",[v("td"),_._v(" "),v("td",[v("code",[_._v("x > y")])]),_._v(" "),v("td",[_._v("大于")])]),_._v(" "),v("tr",[v("td"),_._v(" "),v("td",[v("code",[_._v("x <= y")])]),_._v(" "),v("td",[_._v("小于或等于")])]),_._v(" "),v("tr",[v("td"),_._v(" "),v("td",[v("code",[_._v("x >= y")])]),_._v(" "),v("td",[_._v("大于或等于")])]),_._v(" "),v("tr",[v("td"),_._v(" "),v("td",[v("code",[_._v("x is T")])]),_._v(" "),v("td",[_._v("如果 x 位 T ，返回"),v("code",[_._v("true")]),_._v("，否则"),v("code",[_._v("false")])])]),_._v(" "),v("tr",[v("td"),_._v(" "),v("td",[v("code",[_._v("x as T")])]),_._v(" "),v("td",[_._v("返回转换为类型 T 的 x ,如果 x 不是 T 则返回"),v("code",[_._v("null")])])]),_._v(" "),v("tr",[v("td"),_._v(" "),v("td",[v("code",[_._v("x == y")])]),_._v(" "),v("td",[_._v("等于")])]),_._v(" "),v("tr",[v("td"),_._v(" "),v("td",[v("code",[_._v("x != y")])]),_._v(" "),v("td",[_._v("不等于")])]),_._v(" "),v("tr",[v("td"),_._v(" "),v("td",[v("code",[_._v("x & y")])]),_._v(" "),v("td",[_._v("整形按位与  ,布尔逻辑AND")])]),_._v(" "),v("tr",[v("td"),_._v(" "),v("td",[v("code",[_._v("x | y")])]),_._v(" "),v("td",[_._v("整形按位或  ,布尔逻辑OR")])]),_._v(" "),v("tr",[v("td"),_._v(" "),v("td",[v("code",[_._v("x && y")])]),_._v(" "),v("td",[_._v("且，当 x 为"),v("code",[_._v("true")]),_._v("时，才对 y 求值")])]),_._v(" "),v("tr",[v("td"),_._v(" "),v("td",[v("code",[_._v("x || y")])]),_._v(" "),v("td",[_._v("或，当 x 为"),v("code",[_._v("false")]),_._v("时。才对 y 求值")])]),_._v(" "),v("tr",[v("td"),_._v(" "),v("td",[v("code",[_._v("x ?? y")])]),_._v(" "),v("td",[_._v("如果 x 为"),v("code",[_._v("null")]),_._v("，则计算结果为 y，否则为 x")])]),_._v(" "),v("tr",[v("td",[_._v("三元")]),_._v(" "),v("td",[v("code",[_._v("x ? y : z")])]),_._v(" "),v("td",[_._v("如果 x 为"),v("code",[_._v("true")]),_._v(",对 y 求值，x 为"),v("code",[_._v("false")]),_._v("，对 z 求值")])]),_._v(" "),v("tr",[v("td",[_._v("赋值或匿名函数")]),_._v(" "),v("td",[v("code",[_._v("x = y")])]),_._v(" "),v("td",[_._v("赋值")])]),_._v(" "),v("tr",[v("td"),_._v(" "),v("td",[v("code",[_._v("x = x + y")])]),_._v(" "),v("td",[_._v("复合赋值")])]),_._v(" "),v("tr",[v("td"),_._v(" "),v("td",[v("code",[_._v("(T x) => y")])]),_._v(" "),v("td",[_._v("匿名函数（lambda表达式）")])])])]),_._v(" "),v("h3",{attrs:{id:"分支语句"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#分支语句"}},[_._v("#")]),_._v(" 分支语句")]),_._v(" "),v("h4",{attrs:{id:"if-语句"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#if-语句"}},[_._v("#")]),_._v(" if 语句")]),_._v(" "),v("h4",{attrs:{id:"if-else-语句"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#if-else-语句"}},[_._v("#")]),_._v(" if-else 语句")]),_._v(" "),v("h4",{attrs:{id:"switch-语句"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#switch-语句"}},[_._v("#")]),_._v(" switch 语句")]),_._v(" "),v("h4",{attrs:{id:"循环语句"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#循环语句"}},[_._v("#")]),_._v(" 循环语句")]),_._v(" "),v("h5",{attrs:{id:"for循环"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#for循环"}},[_._v("#")]),_._v(" for循环")]),_._v(" "),v("div",{staticClass:"language-C# extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("for(int i = 0; i<10;i++ ){     }           \n")])])]),v("h5",{attrs:{id:"while循环"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#while循环"}},[_._v("#")]),_._v(" while循环")]),_._v(" "),v("div",{staticClass:"language-C# extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("while(true){  }\n")])])]),v("h5",{attrs:{id:"do-while循环"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#do-while循环"}},[_._v("#")]),_._v(" do-while循环")]),_._v(" "),v("div",{staticClass:"language-C# extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("do{  }while(true)\n")])])]),v("h3",{attrs:{id:"数组"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[_._v("#")]),_._v(" 数组")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("数组是一组相同类型的数据。")])]),_._v(" "),v("li",[v("p",[_._v("数组中的数据需要通过数字索引来访问。")])])]),_._v(" "),v("h4",{attrs:{id:"数组的声明"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数组的声明"}},[_._v("#")]),_._v(" 数组的声明")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("数组的声明需要使用"),v("code",[_._v("new")]),_._v("关键字。")])]),_._v(" "),v("li",[v("p",[_._v("在声明数组时，可以使用"),v("code",[_._v("{}")]),_._v("来初始化数组中的元素。")])]),_._v(" "),v("li",[v("p",[_._v("如果在数组声明之初没有使用大括号来初始化数组中的元素，则需要指定数组的大小。")])]),_._v(" "),v("li",[v("p",[_._v("在声明初始化有元素的数组时，也可以指定数组大小。")])])]),_._v(" "),v("div",{staticClass:"language-C# extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v('//声明没有元素的数组     \nint[] ints = new int[6]     \n//声明初始化有元素的数组     \nint[] ints = new int[]{1, 3, 4, 5}     \n//在声明初始化有元素的数组时，也可以指定数组大小     \nstring[] strings = new int[5]{"H"， “E"， "L"，“L","0"}\n')])])]),v("h4",{attrs:{id:"通过索引获取数组中的元素。"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#通过索引获取数组中的元素。"}},[_._v("#")]),_._v(" 通过索引获取数组中的元素。")]),_._v(" "),v("ul",[v("li",[_._v("给数组指定长度时，数组准备存放多少元素，长度就设置为多少。")]),_._v(" "),v("li",[_._v("用索引获取数组内的元素时，索弓|从0开始获取。")]),_._v(" "),v("li",[_._v("所以数组中最大的索引数字，比指定数组长度小1。")])]),_._v(" "),v("div",{staticClass:"language-C# extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("//声明初始化有元素的数组  \nint[] ints = new int[]{1, 3，4，5}  \n//获取数组中第1个的元素。\nint i1 = ints[0];  \n//给数组内的元素赋值\nints[0]  = 1  \n")])])]),v("h4",{attrs:{id:"总结提升"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#总结提升"}},[_._v("#")]),_._v(" 总结提升")]),_._v(" "),v("h5",{attrs:{id:"案例一-老公买西瓜系列"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#案例一-老公买西瓜系列"}},[_._v("#")]),_._v(" 案例一：老公买西瓜系列")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("超市西瓜的价格是1.9元/斤。")])]),_._v(" "),v("li",[v("p",[_._v("老公下班买了6斤西瓜。")])]),_._v(" "),v("li",[v("p",[_._v("此时得知正逢双11,购买商品满10元优惠7.5折。")])]),_._v(" "),v("li",[v("p",[_._v("问此时老公买西瓜花了多少钱?")])])]),_._v(" "),v("h6",{attrs:{id:"思考"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#思考"}},[_._v("#")]),_._v(" 思考")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("以上案例需要设置几个变量?")])]),_._v(" "),v("li",[v("p",[_._v("需要声明何种类型的变量?")])]),_._v(" "),v("li",[v("p",[_._v("如果体重要求满几个10元， 就在几个10元上打7.5折应该如何计算?")])])]),_._v(" "),v("h6",{attrs:{id:"总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[_._v("#")]),_._v(" 总结")]),_._v(" "),v("ul",[v("li",[v("p",[v("strong",[_._v("变量名")]),v("em",[_._v("只有在")]),v("em",[_._v("某一区域内")]),_._v("*第1次出现时才要声明变量。")])]),_._v(" "),v("li",[v("p",[_._v("变量名在区域内第二次出现时不用声明变量，而是直接使用之前声明的变量。")])]),_._v(" "),v("li",[v("p",[_._v("变量名命名是我们一般遵循驼峰命名法，即以小写宇母开头，多个单词拼接时，除第一个单词外， 其余首字母大写。")])]),_._v(" "),v("li",[v("p",[_._v("在程序开发中可以修改之前保存的变量值。")])])]),_._v(" "),v("h6",{attrs:{id:"扩展"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#扩展"}},[_._v("#")]),_._v(" 扩展")]),_._v(" "),v("ul",[v("li",[v("p",[v("code",[_._v("(int)")]),_._v("表示使用显式强制转换，是一种类型转换，C#默认整型是int32, 因此使用此方法转成int 32位，不遵循四舍五入，只截取整数部分;")])]),_._v(" "),v("li",[v("p",[v("code",[_._v("(int)5.21 //输出5")])])]),_._v(" "),v("li",[v("p",[v("code",[_._v("Int.Parse()")]),_._v(": 只支持将"),v("code",[_._v("string")]),_._v("类型转成"),v("code",[_._v("int")]),_._v(", "),v("code",[_._v("Parse")]),_._v("就是把"),v("code",[_._v("String")]),_._v("类型转换成"),v("code",[_._v("int")]),_._v(","),v("code",[_._v("char")]),_._v(","),v("code",[_._v("double")]),_._v("...等,也就是"),v("code",[_._v("*.Parse(string)")]),_._v("括号中的一定要是"),v("code",[_._v("string")]),_._v("类型。")])])]),_._v(" "),v("div",{staticClass:"language-C# extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v('String st="5.21";\ndouble n=5.21;\nInt . Parse(st);//输出5\nInt .Parse(n);//报错\n')])])]),v("ul",[v("li",[v("code",[_._v("Convert.Tolnt32(double value)")]),_._v(" ,不完全遵循四舍五入，如果value为两个整数中间的数字，则返回二者中的偶数，")])]),_._v(" "),v("p",[_._v("对比下面的例子:")]),_._v(" "),v("div",{staticClass:"language-C# extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("Console.WriteLine(Convert.ToInt32(4.3));//四舍五入，输出4\nConsole.WriteLine(Convert.ToInt32(4.5));//第一位小数为5时，4. 5在4和5之间，输出偶数4 \nConsole.WriteLine(Convert.ToInt32(4.53)); //四舍五入，输出5\nConsole.WriteLine(Convert.ToInt32(5.3));//四舍五入，输出5\nConsole.WriteLine(Convert.ToInt32(5.5)); //第一位小数为5时，5.5在5和6之间，输出偶数6 \nConsole.WriteLine(Convert.ToInt32(5.53)); //四舍五入，输出6\n")])])]),v("blockquote",[v("p",[_._v("注意："),v("code",[_._v("ConvertToInt32()")]),_._v("和"),v("code",[_._v("int.Parse()")]),_._v("对于空值（"),v("code",[_._v("null")]),_._v("）的处理不同，"),v("code",[_._v("ConvertToInt32(null)")]),_._v("会返回0而不会产生任何异常，但"),v("code",[_._v("int.Parse(null)")]),_._v("则会产生异常。")])]),_._v(" "),v("h5",{attrs:{id:"案例二-班级找赵六系列"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#案例二-班级找赵六系列"}},[_._v("#")]),_._v(" 案例二：班级找赵六系列")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("班级中有张三、李四、王五、赵六、田七、周八共六位同学。")])]),_._v(" "),v("li",[v("p",[_._v("请找出赵六同学送他回家。")])]),_._v(" "),v("li",[v("p",[_._v("分别是用for循环和while循环实现。")])])]),_._v(" "),v("h6",{attrs:{id:"思考-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#思考-2"}},[_._v("#")]),_._v(" 思考")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("以上案例需要设置几个变量?")])]),_._v(" "),v("li",[v("p",[_._v("需要声明何种类型的变量?")])]),_._v(" "),v("li",[v("p",[_._v("for循环和while循环实现上有何差异?")])]),_._v(" "),v("li",[v("p",[_._v("用do-while循环如何实现。")])])]),_._v(" "),v("h6",{attrs:{id:"总结-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#总结-2"}},[_._v("#")]),_._v(" 总结")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("对于数组的初始化还有一种简便的方式: "),v("code",[_._v('string[] strs = {"张三”， "李四”，“王五”，”赵六”，"田七”，”周八”}')]),_._v("。")])]),_._v(" "),v("li",[v("p",[_._v("获取数组长度的方式:"),v("code",[_._v("strs .Length")]),_._v(" 。")])]),_._v(" "),v("li",[v("p",[_._v("需要跳出某个循环时可以使用"),v("code",[_._v("break")]),_._v(" 关键字，跳出当前循环。")])]),_._v(" "),v("li",[v("p",[_._v("满足某些条件后需要直接快进到下一轮循环而不再执行当前循环下的代码，可以使用"),v("code",[_._v("continue")]),_._v(" 关键字实现。")])])]),_._v(" "),v("h3",{attrs:{id:"函数初识"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#函数初识"}},[_._v("#")]),_._v(" 函数初识")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("函数好比是对象的动作行为。")])]),_._v(" "),v("li",[v("p",[_._v("在定义函数要想好函数所承担的作用，职责(作用) 越单一越好。")])])]),_._v(" "),v("h4",{attrs:{id:"函数的命名规范"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#函数的命名规范"}},[_._v("#")]),_._v(" 函数的命名规范")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("函数命名使用"),v("strong",[_._v("大驼峰命名")]),_._v("，即"),v("strong",[_._v("开头首字母大写")])])]),_._v(" "),v("li",[v("p",[_._v("多个单词拼接时，所有单词首字母大写。")])])]),_._v(" "),v("div",{staticClass:"language-C# extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("Add();\nAddCount();\nGetUsrInfo();\n")])])]),v("h4",{attrs:{id:"函数的参数设置-传参行为"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#函数的参数设置-传参行为"}},[_._v("#")]),_._v(" 函数的参数设置&传参行为")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("参数可认为是外部需要函数帮忙处理的数据。")])]),_._v(" "),v("li",[v("p",[_._v("外部通过传递参数的形式，将需要处理的数据交给函数处理。")])])]),_._v(" "),v("h4",{attrs:{id:"函数返回值的设置"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#函数返回值的设置"}},[_._v("#")]),_._v(" 函数返回值的设置")]),_._v(" "),v("ul",[v("li",[_._v("函数返回值可以认为是外部调用某种行为后得到的一种反馈。")])]),_._v(" "),v("h4",{attrs:{id:"拓展-参数修饰符"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#拓展-参数修饰符"}},[_._v("#")]),_._v(" 拓展-- 参数修饰符")]),_._v(" "),v("p",[_._v("修饰符种类")]),_._v(" "),v("ol",[v("li",[v("p",[_._v("无修饰符:如果一个参数没有用参数修饰符标记，则认为它将"),v("strong",[_._v("按值进行传递")]),_._v("，这将意味着被调用的方法收到原始数据的"),v("strong",[_._v("一份副本")]),_._v("。")])]),_._v(" "),v("li",[v("p",[v("code",[_._v("out")]),_._v(": 输出参数"),v("strong",[_._v("由被调用的方法赋值")]),_._v("，因此"),v("strong",[_._v("按引用传递")]),_._v("，如果被调用的方法没有给输出参数赋值，就会出现编译错误，也就是说，只要调用了，就必须给赋值。"),v("code",[_._v("out")]),_._v(" 最大的用途就是调用者只使用一次方法的调用就能获得多个返回值。（在C#7.0中要实现一次方法的调用就能获得多个返回值，建议使用元组。"),v("strong",[_._v("是元组不是元祖")]),_._v("），调用的是指针，是地址")])]),_._v(" "),v("li",[v("p",[v("code",[_._v("ref")]),_._v(": "),v("strong",[_._v("调用者赋初值")]),_._v("，并且可以由被调用的方法可选的"),v("strong",[_._v("重新赋值")]),_._v("（数据是按引用传递的）。如果被调用的方法未能给"),v("code",[_._v("ref")]),_._v("参数赋值，也不会有编译器错误。")])]),_._v(" "),v("li",[v("p",[_._v("了解即可"),v("code",[_._v("params")]),_._v("：这个参数修饰符允许将一组可变的数量的参数作为单独的逻辑参数进行传递， 方法只能有一个"),v("code",[_._v("params")]),_._v("修饰符，而且必须是方法的最后一个参数。")])]),_._v(" "),v("li",[v("p",[v("code",[_._v("out")]),_._v("和"),v("code",[_._v("ref")]),_._v("的区别")]),_._v(" "),v("ul",[v("li",[v("p",[v("code",[_._v("out")]),_._v("修饰的参数必须在方法内修改，而"),v("code",[_._v("ref")]),_._v("可以修改也可以不修改;")])]),_._v(" "),v("li",[v("p",[v("code",[_._v("out")]),_._v("在传入参数的时候，参数是局部变量的话，可以不用赋值，因为"),v("code",[_._v("out")]),_._v("一定会对其进行赋值;")])]),_._v(" "),v("li",[v("p",[_._v("而"),v("code",[_._v("ref")]),_._v("修饰的参数，在实参必须有初始值才能调用。因为"),v("code",[_._v("ref")]),_._v("修饰的不一定会给它赋值。")])])])])]),_._v(" "),v("h2",{attrs:{id:"面向对象-oop-基本概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#面向对象-oop-基本概念"}},[_._v("#")]),_._v(" 面向对象(OOP)基本概念")]),_._v(" "),v("p",[_._v("面向对象编程---"),v("code",[_._v("Object Oriented Programming")]),_._v(" 简写 "),v("code",[_._v("OOP")])]),_._v(" "),v("h3",{attrs:{id:"目标"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#目标"}},[_._v("#")]),_._v(" 目标")]),_._v(" "),v("ul",[v("li",[_._v("了解面向对象基本概念")])]),_._v(" "),v("h3",{attrs:{id:"_01-面向对象基本概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_01-面向对象基本概念"}},[_._v("#")]),_._v(" 01.面向对象基本概念")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("之前所接触到的编程方式叫做"),v("strong",[_._v("面向过程")])])]),_._v(" "),v("li",[v("p",[_._v("面向过程和面向对象是两种不同的编程方式")])]),_._v(" "),v("li",[v("p",[_._v("对比面向过程的特点，可以更好的了解什么是面向对象")])])]),_._v(" "),v("h4",{attrs:{id:"_1-1-过程和函数-科普"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-过程和函数-科普"}},[_._v("#")]),_._v(" 1.1 过程和函数(科普)")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("过程是早期的一个编程概念")])]),_._v(" "),v("li",[v("p",[_._v("过程类似于函数，只能执行，但是没有返回值")])]),_._v(" "),v("li",[v("p",[_._v("函数不仅能执行，还可以返回结果")])])]),_._v(" "),v("h4",{attrs:{id:"_1-2-面向过程和面向对象基本概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-面向过程和面向对象基本概念"}},[_._v("#")]),_._v(" 1.2 面向过程和面向对象基本概念")]),_._v(" "),v("h5",{attrs:{id:"_1-2-1-面向过程-怎么做"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-面向过程-怎么做"}},[_._v("#")]),_._v(" 1.2.1 面向过程---怎么做?")]),_._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[_._v("1. 把完成某一个需求的所有步骤从头到尾 逐步实现\n\n2. 根据开发需求，将某些功能独泣的代码封装成一个又一个函数\n\n3. 最后完成的代码，就是顺序的调用不同的函数\n")])])]),v("h6",{attrs:{id:"面向过程的特点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#面向过程的特点"}},[_._v("#")]),_._v(" 面向过程的特点")]),_._v(" "),v("ol",[v("li",[v("p",[_._v("注重步骤与过程，不注重职责分工")])]),_._v(" "),v("li",[v("p",[_._v("如果需求复杂，代码会变得很复杂")])]),_._v(" "),v("li",[v("p",[_._v("复杂项目，没有固定的套路，难度很大!")])])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://gitee.com/babbittry321/blogImages/raw/master/img/clip_image018.jpg",alt:""}}),_._v(" |")]),_._v(" "),v("h5",{attrs:{id:"_1-2-2-面向对象-谁来做"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2-面向对象-谁来做"}},[_._v("#")]),_._v(" 1.2.2 面向对象---谁来做")]),_._v(" "),v("blockquote",[v("p",[_._v("相比较函数， 面向对象是更大的封裝，根据职责，在一个对象中封裝多个方法")])]),_._v(" "),v("ol",[v("li",[v("p",[_._v("在完成某一个需求前，首先确定职责，要做的事情（方法）")])]),_._v(" "),v("li",[v("p",[_._v("根据职责确定不同的对象，在对象内部封装不同的方法（多个）")])]),_._v(" "),v("li",[v("p",[_._v("最后完成代码，就是顺序的让不同的对象调用不同的方法、")])])]),_._v(" "),v("h6",{attrs:{id:"面向对象的特点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#面向对象的特点"}},[_._v("#")]),_._v(" 面向对象的特点")]),_._v(" "),v("ol",[v("li",[v("p",[_._v("注重对象和职责，不同的对象承担不同的职责")])]),_._v(" "),v("li",[v("p",[_._v("更加适合应对复杂的需求变化，题门应对复杂项目开发，提供固定套路")])]),_._v(" "),v("li",[v("p",[_._v("要在面向过程基础上，学习些面向对象的语法")])])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://gitee.com/babbittry321/blogImages/raw/master/img/clip_image020.jpg",alt:""}})]),_._v(" "),v("h2",{attrs:{id:"类和对象"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#类和对象"}},[_._v("#")]),_._v(" 类和对象")]),_._v(" "),v("h3",{attrs:{id:"目标-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#目标-2"}},[_._v("#")]),_._v(" 目标")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("类和对象的概念")])]),_._v(" "),v("li",[v("p",[_._v("类和对象的关系")])]),_._v(" "),v("li",[v("p",[_._v("类的设计")])])]),_._v(" "),v("h3",{attrs:{id:"_01-类和对象的概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_01-类和对象的概念"}},[_._v("#")]),_._v(" 01.类和对象的概念")]),_._v(" "),v("p",[v("strong",[_._v("类")]),_._v("和"),v("strong",[_._v("对象")]),_._v("是面向对象编程的两个核心概念")]),_._v(" "),v("h4",{attrs:{id:"_1-1-类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-类"}},[_._v("#")]),_._v(" 1.1 类")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("类是对一群具有相同特征或者行为的事物的一个统称，是抽象的，不能直接使用")]),_._v(" "),v("ul",[v("li",[v("p",[v("strong",[_._v("特征")]),_._v("被称为"),v("strong",[_._v("属性")])])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("行为")]),_._v("被称为"),v("strong",[_._v("方法")])])])])]),_._v(" "),v("li",[v("p",[_._v("类就相当于制汽车是的图纸，是-一个模板，是负责创建对象的")])])]),_._v(" "),v("p",[v("img",{attrs:{src:"https://gitee.com/babbittry321/blogImages/raw/master/img/clip_image021.jpg",alt:""}})]),_._v(" "),v("h4",{attrs:{id:"_1-2-对象"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-对象"}},[_._v("#")]),_._v(" 1.2 对象")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("对象是由类创造出来的一个具体存在，可以直接使用")])]),_._v(" "),v("li",[v("p",[_._v("由哪一个类创造出来的对象，就拥有在哪一个类中定义的属性和方法")])]),_._v(" "),v("li",[v("p",[_._v("对象就相当于用图纸制造的汽车")])])]),_._v(" "),v("p",[_._v("在程序开发中，应先有类，再有对象")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://gitee.com/babbittry321/blogImages/raw/master/img/clip_image023.jpg",alt:""}}),_._v(" |")]),_._v(" "),v("h3",{attrs:{id:"_02-类和对象的关系"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_02-类和对象的关系"}},[_._v("#")]),_._v(" 02.类和对象的关系")]),_._v(" "),v("ul",[v("li",[v("p",[v("strong",[_._v("类")]),_._v("是模板，"),v("strong",[_._v("对象")]),_._v("是根据"),v("strong",[_._v("类")]),_._v("这个模板创建出来的，应该先有类，再有对象")])]),_._v(" "),v("li",[v("p",[_._v("类只有一个， 而对象可以有很多个")]),_._v(" "),v("ul",[v("li",[_._v("不同的对象之间属性的具体内容可能各不相同")])])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("类中定义了什么属性和方法，对象中就有什么属性和方法，不可能多，也不可能少")])])])]),_._v(" "),v("h3",{attrs:{id:"_03-类的设计"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_03-类的设计"}},[_._v("#")]),_._v(" 03.类的设计")]),_._v(" "),v("p",[_._v("在使用面向对象开发前，应该首先分析需求，确定一下程序中需要包含哪些类")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://gitee.com/babbittry321/blogImages/raw/master/img/clip_image025.jpg",alt:""}})]),_._v(" "),v("p",[_._v("在程序开发中要设计一个类，通常需要满足以下三个要素:")]),_._v(" "),v("ol",[v("li",[v("p",[v("strong",[_._v("类名")]),_._v("这类事物的名称，满足大驼峰命名法")])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("属性")]),_._v("这类事物具有什么样的特征")])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("方法")]),_._v("这类事物具有什么样的行为")])])]),_._v(" "),v("h4",{attrs:{id:"_3-1-类名的确定"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-类名的确定"}},[_._v("#")]),_._v(" 3.1 类名的确定")]),_._v(" "),v("p",[_._v("名词提炼法分析整个业务流程，出现的名词，通常就是找到的类。")]),_._v(" "),v("h4",{attrs:{id:"_3-2-属性和方法的确定"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-属性和方法的确定"}},[_._v("#")]),_._v(" 3.2 属性和方法的确定")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("对对象的特征，描述通常可以定义成属性。")])]),_._v(" "),v("li",[v("p",[_._v("对象具有的行为通常可以定义为方法。注：方法般是动作即动词")])])]),_._v(" "),v("blockquote",[v("p",[_._v("提示：需求没有涉及的属性或者方法在设计类时，不需要考虑")])]),_._v(" "),v("h4",{attrs:{id:"练习1"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#练习1"}},[_._v("#")]),_._v(" 练习1")]),_._v(" "),v("h5",{attrs:{id:"需求"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#需求"}},[_._v("#")]),_._v(" 需求")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("张三今年18岁，身高1米75，每天早上跑完步回去吃东西")])]),_._v(" "),v("li",[v("p",[_._v("李四今年17岁，身高1米65，他不跑步，但喜欢吃东西")])])]),_._v(" "),v("table",[v("thead",[v("tr",[v("th",[_._v("类名")]),_._v(" "),v("th",[v("strong",[_._v("人")])])])]),_._v(" "),v("tbody",[v("tr",[v("td",[_._v("属性")]),_._v(" "),v("td",[_._v("名字，年龄，身高")])]),_._v(" "),v("tr",[v("td",[_._v("方法")]),_._v(" "),v("td",[_._v("跑步(), 吃()")])])])]),_._v(" "),v("h4",{attrs:{id:"练习2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#练习2"}},[_._v("#")]),_._v(" 练习2")]),_._v(" "),v("h5",{attrs:{id:"需求-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#需求-2"}},[_._v("#")]),_._v(" 需求")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("一只灰色的怪兽叫哥斯拉")])]),_._v(" "),v("li",[v("p",[_._v("他会喷火烧")])]),_._v(" "),v("li",[v("p",[_._v("还会发射激光")])])]),_._v(" "),v("table",[v("thead",[v("tr",[v("th",[_._v("类名")]),_._v(" "),v("th",[v("strong",[_._v("怪兽")])])])]),_._v(" "),v("tbody",[v("tr",[v("td",[_._v("属性")]),_._v(" "),v("td",[_._v("名字，颜色")])]),_._v(" "),v("tr",[v("td",[_._v("方法")]),_._v(" "),v("td",[_._v("喷火(), 发射激光()")])])])]),_._v(" "),v("h3",{attrs:{id:"_04-类和对象的使用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_04-类和对象的使用"}},[_._v("#")]),_._v(" 04.类和对象的使用")]),_._v(" "),v("h4",{attrs:{id:"_4-1-声明类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-声明类"}},[_._v("#")]),_._v(" 4.1 声明类")]),_._v(" "),v("ul",[v("li",[_._v("声明一个类需要使用"),v("code",[_._v("class")]),_._v("关键字")]),_._v(" "),v("li",[_._v("类的属性及方法写在"),v("code",[_._v("{}")]),_._v("中")]),_._v(" "),v("li",[_._v("后面不加分号")])]),_._v(" "),v("div",{staticClass:"language-C# extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("public class Person{\n\n}\n")])])]),v("h4",{attrs:{id:"_4-2-声明属性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-声明属性"}},[_._v("#")]),_._v(" 4.2 声明属性")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("属性在C#中较为独特，他既不同于方法，也不同于字段。")])]),_._v(" "),v("li",[v("p",[_._v("属性依旧遵循大驼峰命名法")])]),_._v(" "),v("li",[v("p",[_._v("属性最常用的书写方法: "),v("code",[_._v("public int Age {get; set;}")])])]),_._v(" "),v("li",[v("p",[_._v("如果属性中具有"),v("code",[_._v("get")]),_._v("关键字，说明可以获取该属性的值。")])]),_._v(" "),v("li",[v("p",[_._v("如果属性中具有"),v("code",[_._v("set")]),_._v("关键字，说明可以向该属性设置值。")])])]),_._v(" "),v("h4",{attrs:{id:"_4-3-声明方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-声明方法"}},[_._v("#")]),_._v(" 4.3 声明方法")]),_._v(" "),v("p",[v("em",[_._v("详见函数初识")])]),_._v(" "),v("h4",{attrs:{id:"_4-4-实例化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-实例化"}},[_._v("#")]),_._v(" 4.4 实例化")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("类使用关键字"),v("code",[_._v("new")]),_._v("实例化对象。")])]),_._v(" "),v("li",[v("p",[_._v("一个类可以实例化多个对象。")])]),_._v(" "),v("li",[v("p",[_._v("对象可以使用类定义的属性和方法。")])])]),_._v(" "),v("h4",{attrs:{id:"_4-5-知识拓展"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-知识拓展"}},[_._v("#")]),_._v(" 4.5 知识拓展")]),_._v(" "),v("h5",{attrs:{id:"访问修饰符"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#访问修饰符"}},[_._v("#")]),_._v(" 访问修饰符")]),_._v(" "),v("h6",{attrs:{id:"访问修饰符-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#访问修饰符-2"}},[_._v("#")]),_._v(" 访问修饰符:")]),_._v(" "),v("ul",[v("li",[v("p",[v("code",[_._v("public")]),_._v(": 公有的，所有的类都可以访问")])]),_._v(" "),v("li",[v("p",[v("code",[_._v("private")]),_._v(": 私有的，当前类内部可访问。")])]),_._v(" "),v("li",[v("p",[v("code",[_._v("protected")]),_._v(": 受保护的，当前类以及继承他的子类可访问")])]),_._v(" "),v("li",[v("p",[v("code",[_._v("internal")]),_._v(":内部的，只限于本项目内访问，其他的不能访问。")])]),_._v(" "),v("li",[v("p",[v("code",[_._v("protected internal")]),_._v(":内部保护访问，只能是本项目内部或子类访问，其他类不能访问")])])]),_._v(" "),v("h6",{attrs:{id:"访问级别约束"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#访问级别约束"}},[_._v("#")]),_._v(" 访问级别约束:")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("父类子类访问修饰符要保持一 致")])]),_._v(" "),v("li",[v("p",[_._v("方法的访问修饰符要和方法参数的访问修饰符保持一致")])])]),_._v(" "),v("blockquote",[v("p",[_._v("注意: 类的访问级别默认为隐式私有需要加上"),v("code",[_._v("public")]),_._v(" 才可让外部访问")])]),_._v(" "),v("p",[_._v("静态方法、 属性")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("静态和属性方法通过"),v("code",[_._v("static")]),_._v(" 关键字修饰")])]),_._v(" "),v("li",[v("p",[_._v("静态和属性可以通过类型直接获取，非静态则必须通过实例化的对象获取")])])]),_._v(" "),v("p",[_._v("静态类")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("静态类通过"),v("code",[_._v("static")]),_._v(" 关键字修饰")])]),_._v(" "),v("li",[v("p",[_._v("一般情况下类型不需要使用静态修饰，只有当类型中存在扩展方法时需要使用静态类")])])]),_._v(" "),v("h2",{attrs:{id:"集合-字典的初识"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#集合-字典的初识"}},[_._v("#")]),_._v(" 集合&字典的初识")]),_._v(" "),v("h3",{attrs:{id:"_01-集合的使用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_01-集合的使用"}},[_._v("#")]),_._v(" 01.集合的使用")]),_._v(" "),v("ul",[v("li",[_._v("集合与数组比较类似，都用于存放"),v("strong",[_._v("一组值")]),_._v("。")])]),_._v(" "),v("h4",{attrs:{id:"_1-1-数组的优劣分析"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-数组的优劣分析"}},[_._v("#")]),_._v(" 1.1 数组的优劣分析")]),_._v(" "),v("h5",{attrs:{id:"优势"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#优势"}},[_._v("#")]),_._v(" 优势")]),_._v(" "),v("ul",[v("li",[_._v("数组在内存中是"),v("strong",[_._v("连续存储")]),_._v("的，所以它的索引速度是非常的快，而且赋值与修改元素也很简单。")])]),_._v(" "),v("h5",{attrs:{id:"劣势"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#劣势"}},[_._v("#")]),_._v(" 劣势")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("在数组的两个数据间插入数据很麻烦。")])]),_._v(" "),v("li",[v("p",[_._v("在声明数组的时候， 必须同时"),v("strong",[_._v("指明数组的长度")]),_._v("，数组的长度过长，会造成内存浪费，数组和长度过短，会造成数据溢出的错误。")])])]),_._v(" "),v("h4",{attrs:{id:"_1-2-arraylist的使用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-arraylist的使用"}},[_._v("#")]),_._v(" 1.2  "),v("code",[_._v("ArrayList")]),_._v("的使用")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("ArrayList")]),_._v("是.NET Framework提供的用于数据存储和检索的专用类")]),_._v(" "),v("li",[_._v("它是命名空间"),v("code",[_._v("System.Collections")]),_._v("下的一部分")])]),_._v(" "),v("h5",{attrs:{id:"arraylist的优势"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#arraylist的优势"}},[_._v("#")]),_._v(" "),v("code",[_._v("ArrayList")]),_._v("的优势")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("ArrayList")]),_._v(" 的大小是按照其中存储的数据来动态扩充与收缩的")]),_._v(" "),v("li",[_._v("在声明"),v("code",[_._v("ArrayList")]),_._v("对象时并不需要指定它的长度")]),_._v(" "),v("li",[v("code",[_._v("ArrayList")]),_._v("可以很方便的进行数据的添加，插入和移除")])]),_._v(" "),v("div",{staticClass:"language-C# extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v('ArrayList arrayList=new ArrayList();\narrayList.Add(123);\t\t//将数据新增到集合结尾处\narrayList.Add("abc");\t//将数据新增到集合结尾处\narrayList[2]=345;     \t//修改指定索引的数据\narrayList.RemoveAT(0);  //移除指定索引处的数据\narrayList.Remove(123);  //移除内容为123的数据\narrayList.Insert(0,"hello world");    //再指定索引处插入数据\n')])])]),v("blockquote",[v("p",[_._v("从上面示例看，"),v("code",[_._v("ArrayList")]),_._v("好像是解决了数组中所有的缺点，那么它应该就是完美的。可是在C#2.0后又会出现了"),v("code",[_._v("List")]),_._v("集合，这是为何?")])]),_._v(" "),v("h5",{attrs:{id:"arraylist的劣势"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#arraylist的劣势"}},[_._v("#")]),_._v(" "),v("code",[_._v("ArrayList")]),_._v("的劣势")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("ArrayList")]),_._v("在存储数据时是使用"),v("code",[_._v("object")]),_._v("类型进行存储的")]),_._v(" "),v("li",[v("code",[_._v("ArrayList")]),_._v("不是类型安全的，使用时很可能会出现类型不匹配的错误")]),_._v(" "),v("li",[_._v("就算都有插入了同一类型的数据，但在使用的时候，我们也需要将它们转化为对应的原类型来处理")]),_._v(" "),v("li",[v("code",[_._v("ArrayList")]),_._v("的存储存在"),v("strong",[_._v("装箱和拆箱")]),_._v("操作，导致其性能低下")])]),_._v(" "),v("h4",{attrs:{id:"_1-3-装箱与拆箱的概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-装箱与拆箱的概念"}},[_._v("#")]),_._v(" 1.3 装箱与拆箱的概念")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("装箱")]),_._v("就是将比如"),v("code",[_._v("int")]),_._v("类型或者"),v("code",[_._v("string")]),_._v("等不同的对象通过"),v("strong",[_._v("隐式转换")]),_._v("赋给"),v("code",[_._v("object")]),_._v("对象。")])]),_._v(" "),v("div",{staticClass:"language-C# extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("int i = 123;\nobject o= 1;  \n")])])]),v("ul",[v("li",[v("strong",[_._v("拆箱")]),_._v("就是将"),v("code",[_._v("object")]),_._v("对象通过"),v("strong",[_._v("显示转换")]),_._v("赋给"),v("code",[_._v("int")]),_._v("类型的变量")])]),_._v(" "),v("div",{staticClass:"language-C# extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("object o=123;\nint i = (int)o;  \n")])])]),v("ul",[v("li",[_._v("装箱与拆箱的过程会产生较多的 性能损耗。")]),_._v(" "),v("li",[_._v("正是因为"),v("code",[_._v("ArrayList")]),_._v("存在不安全类型与装箱拆箱的缺点，所以在C#2.0后出现了"),v("strong",[_._v("泛型")]),_._v("的概念。")]),_._v(" "),v("li",[_._v("泛型的概念在此先不多做表述，为便于大家记忆，可以简单理解成：限制集合只能够存储"),v("strong",[_._v("单一类型数据")]),_._v("的一种手段。")])]),_._v(" "),v("h4",{attrs:{id:"_1-4-list集合"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-list集合"}},[_._v("#")]),_._v(" 1.4  "),v("code",[_._v("List")]),_._v("集合")]),_._v(" "),v("ul",[v("li",[_._v("目前我们只需要学习List集合这一 种类型即可，以此为突破口，以后再学习其他集合就会非常容易")])]),_._v(" "),v("h5",{attrs:{id:"list集台的声明"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#list集台的声明"}},[_._v("#")]),_._v(" List集台的声明")]),_._v(" "),v("ul",[v("li",[v("p",[v("code",[_._v("List")]),_._v(" 集合与"),v("code",[_._v("ArrayList")]),_._v(" 由于都继承成了相同的接口，故使用与"),v("code",[_._v("ArrayList")]),_._v(" 相似。")])]),_._v(" "),v("li",[v("p",[_._v("在声明"),v("code",[_._v("List")]),_._v("集合时，需要同时为其声明"),v("code",[_._v("List")]),_._v("集合内数据的"),v("strong",[_._v("对象类型")])])]),_._v(" "),v("li",[v("p",[_._v("示例: "),v("code",[_._v("List<int> intList = new List();")])])])]),_._v(" "),v("p",[_._v("所谓"),v("strong",[_._v("接口")]),_._v("目前可以简单理解成"),v("strong",[_._v("限制和规定类型行为")]),_._v("即"),v("strong",[_._v("类型方法")]),_._v("的一种手段")]),_._v(" "),v("div",{staticClass:"language-C# extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("List<int> list = new List<int>();   // 第一种初始化方式\nlist.Add(123);      // 新增数据到结尾处\nList<int>  intList = new List<int>  // 第二种初始化方式\n{\n    123,\n    456,\n    789\n};\nintList[2] = 345;\nintList.RemoveAt(0);    // 删除指定索引处的数据\nintList.Remove(123);    // 删除内容为123的数据\nintList.Insert(0, 6688);\n")])])]),v("p",[_._v('上例中如果我们往List集合中插入string宇符"hello world",系统就会报错，且不能通过编译。这样就避免了前面讲的类型安全问题与装箱拆箱的性能问题')]),_._v(" "),v("h5",{attrs:{id:"思考-3"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#思考-3"}},[_._v("#")]),_._v(" 思考")]),_._v(" "),v("ul",[v("li",[_._v('在上一节“类的使用"中我们知道，'),v("code",[_._v("int")]),_._v("本身也是一 个类型，"),v("code",[_._v("in")]),_._v("t类型声明的变量接受"),v("code",[_._v("int")]),_._v("类型的数据， "),v("code",[_._v("int")]),_._v("类型可以指定"),v("code",[_._v("List")]),_._v("集合的数据类型。那么我们自己创建的类型是否可以限定"),v("code",[_._v("List")]),_._v("集合的数据类型呢?\n"),v("ul",[v("li",[_._v("答案是：可以。")])])])]),_._v(" "),v("h5",{attrs:{id:"总结-3"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#总结-3"}},[_._v("#")]),_._v(" 总结")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("集合与数组比较类似，都用于存放一组值")])]),_._v(" "),v("li",[v("p",[_._v("集合中提供了特定的方法能直接操作集合中的数据，并提供了不同的集合类来实现特定的功能")])]),_._v(" "),v("li",[v("p",[_._v("简单的说就是数组的升级版。他可以动态的对集合的长度(也就是集合内最大元素的个数)进行定义和维护")])]),_._v(" "),v("li",[v("p",[v("code",[_._v("List")]),_._v("泛型的好处指通过允许指定"),v("strong",[_._v("泛型类或方法")]),_._v("操作的"),v("strong",[_._v("特定类型")]),_._v("，减少了类型强制转换的需要和运行时错误的可能性，泛型提供了类型安全，但没有增加开销。")])])]),_._v(" "),v("h3",{attrs:{id:"_02-dictionary字典的使用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_02-dictionary字典的使用"}},[_._v("#")]),_._v(" 02. "),v("code",[_._v("Dictionary")]),_._v("字典的使用")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("在声明"),v("code",[_._v("Dictionary")]),_._v("字典时，需要同事为其声明"),v("code",[_._v("Dictionary")]),_._v("字典内的键与值的类型")])]),_._v(" "),v("li",[v("p",[_._v("示例："),v("code",[_._v("Dictionary<int, string> dictionary = new Dictionary<int, string>();")])])])]),_._v(" "),v("p",[_._v("键与值可以是任何类型，但是键必须在设置时是唯一的，而值可以不唯一，就好比每个学生的学号必须是唯一的，而所有的成绩可以不唯一。")]),_._v(" "),v("div",{staticClass:"language-C# extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v('Dictionary<int, string> dictionary = new Dictionary<int,  string>();\n//两种赋值方式  \n// 方  式 一 ：Add 方 法 赋 值 \ndictionary.Add(1, "98分"); \ndictionary.Add(2, "92分");  \ndictionary.Add(3, "89分"); \ndictionary.Add(1, "88分");\t//系统会报错  \n//方式二：索引器赋值  \ndictionary[1] = "88分";\t\t//系统不会报错\ndictionary[4]  = "99分";  \n//方式三：对象初始化器  \nDictionary<string, string> dictionary2 = new  Dictionary<string, string>()  {\n\t{"A","aa" },  \n\t{"B","BB" },  \n\t{"C","CC" }  \n};  \n')])])]),v("p",[_._v("注意"),v("code",[_._v("dictionary[1]")]),_._v("方式既可以赋新值可以修改原来已键有的值，类似于数组索引器的使用, 所以可以使用之前已使用过的键。但是"),v("code",[_._v("Add")]),_._v("方法不可以添加已有键的值。")]),_._v(" "),v("div",{staticClass:"language-C# extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("//获取键为1的值  \n//方式一：索引器取值  \nstring value = dictionary[1];  \n//方式二：foreach遍历取值  \nforeach (KeyValuePair<string, string> item in dictionary) {  \n    int key  = item.Key; \n\tstring value = item.Value;  \n}  \n//移除键为1的键值对\ndictionary.Remove(1);\n")])])]),v("h4",{attrs:{id:"总结-4"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#总结-4"}},[_._v("#")]),_._v(" 总结")]),_._v(" "),v("ul",[v("li",[v("p",[v("strong",[_._v("键")]),_._v("与"),v("strong",[_._v("值")]),_._v("可以是任何类型，但是键必须在设置时是唯一 的，而值可以不唯一")])]),_._v(" "),v("li",[v("p",[_._v("使用"),v("code",[_._v("Add()")]),_._v("方法添加键值对，不可添加已有的键名")])]),_._v(" "),v("li",[v("p",[_._v("索引模式可以"),v("strong",[_._v("新赋值")]),_._v("也可以"),v("strong",[_._v("修改已有的键值")]),_._v("。")])])]),_._v(" "),v("h3",{attrs:{id:"_03-foreach的使用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_03-foreach的使用"}},[_._v("#")]),_._v(" 03. "),v("code",[_._v("foreach")]),_._v("的使用")]),_._v(" "),v("ul",[v("li",[v("p",[v("code",[_._v("foreach")]),_._v("就是传说中的增强"),v("code",[_._v("for")]),_._v("循环或者称作"),v("code",[_._v("foreach")]),_._v("循环")])]),_._v(" "),v("li",[v("p",[v("code",[_._v("foreach")]),_._v("对遍历字典或集合具备天然优势，效率高过"),v("code",[_._v("for")]),_._v("循环")])])]),_._v(" "),v("h4",{attrs:{id:"_3-1-foreach操作数组"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-foreach操作数组"}},[_._v("#")]),_._v(" 3.1 "),v("code",[_._v("foreach")]),_._v("操作数组")]),_._v(" "),v("div",{staticClass:"language-c# extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("int[] ints= {1，2，3，4，5，6};\nforeach (int item in ints){  //每次循环，其item都是整型数组中的一个元素  } \n")])])]),v("h4",{attrs:{id:"_3-2-foreach操作集合"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-foreach操作集合"}},[_._v("#")]),_._v(" 3.2 "),v("code",[_._v("foreach")]),_._v("操作集合")]),_._v(" "),v("div",{staticClass:"language-C# extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("List<int> intList = new  List<int>() { 1, 2，3, 4，5, 6 }; \nforeach (int item in ints){  //每次循环，其item都是List集合中的一个元素  }\n")])])]),v("h4",{attrs:{id:"_3-3-foreach操作字典"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-foreach操作字典"}},[_._v("#")]),_._v(" 3.3 "),v("code",[_._v("foreach")]),_._v("操作字典")]),_._v(" "),v("div",{staticClass:"language-C# extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v('Dictionary<string, string> dictionary = new Dictionary<string,  string>() {  \n    { "A","aa"}, \n    { "B","bb"}, \n    { "C","cc"}，\n};  \nforeach  (KeyValuePair<int, string> item  in dictionary) {\n    int key  = item.Key; \n\tstring value =  item.Value; \n}  \n')])])])])}),[],!1,null,null,null);v.default=r.exports}}]);